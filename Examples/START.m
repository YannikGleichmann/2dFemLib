%% Start
% This example shows how to construct meshes and plot FE functions

%% PATH
clear; close all; clc;
addpath(genpath('../Routines'));

%% Function Space
% At frist define a function space. Possible values are P1, P2, P3 and P1b,
% P2b, P3b (b = bubble function and mass lumping will be used)
FunctionSpace = 'P1';

%% Mesh
% Next construct a mesh with genMesh. Possible inputs are the point
% and connectivity matrix (for the coarsest mesh), the maximal number of
% refinements nRef or the maximal element size hmax, and the function
% space FunctionSpace. If nothing stated a mesh hmax = 0.1 for P1
% on [0,1]^2 will be constructed (i.e. mesh = genMesh();)
hmax = 0.05;
mesh = genMesh('hmax',hmax,'FunctionSpace',FunctionSpace);

%% Plot
% Now the mesh can  be plotted
figure();
subplot(2,2,1); PlotFEMesh(mesh); title(sprintf('hmax = %f',hmax));
                axis off equal tight
hmax = hmax/2;
mesh = genMesh('hmax',hmax,'FunctionSpace',FunctionSpace);
subplot(2,2,2); PlotFEMesh(mesh); title(sprintf('hmax = %f',hmax));
                axis off equal tight
mesh = genMesh('FunctionSpace',FunctionSpace,'nRef',0);
subplot(2,2,3); PlotFEMesh(mesh); title('initial mesh');
                axis off equal tight
nRef = 5;
mesh = genMesh('FunctionSpace',FunctionSpace,'nRef',nRef);
subplot(2,2,4); PlotFEMesh(mesh);
                title(sprintf('number of refinements = %d',nRef));
                axis off equal tight
sgtitle(sprintf('three different meshes for P1 elements,\nfunction plot'));
% insted of PlotFEMesh(mesh), which uses a seperate matlab-function to plot
% the mesh, one could write mesh.Plot for a quick-and-dirty mesh plot
% where only the P1 equivalent mesh will be plotted. Meshes other than P1
% see below

%% Function
% We want to plot the function f(x,y) = sin(pi*x)*cos(pi*y). Therefor
% define the function handle
f_ = @(x,y) sin(pi*x).*cos(pi*y);
% Now we evaluate f_ on the mesh. With mesh.p we get the point matrix for
% the given mesh; here px corresponds to the x-coordinate of all verticies:
px = mesh.p(:,1); py = mesh.p(:,2); F = f_(px,py);
% Then we construct f as a Function class
f = Function(mesh,F);
% Alternatively, we could also first create a Function object
% f = Function(); and then insert the Mesh and NodalValues manually via
% f.Mesh = mesh;
% f.NodalValues = F;
% Plot the function: The Matlab-Function PlotFEFunction takes a function of
% Function class as an input argument.
figure();
subplot(1,2,1); PlotFEMesh(mesh); axis off equal tight; title('mesh');
subplot(1,2,2); PlotFEFunction(f); title('f(x,y) = sin(pi*x)*cos(pi*y)');
% Or alternatively for a quick-and-dirty plot type f.Plot

%% Other meshes than P1.
% We now want to construct a P2 mesh. In general, PlotFEMesh will only plot
% the "coarser" triangle and no subtriangle. Here is a small demonstration
FunctionSpace = 'P2';
mesh = genMesh('FunctionSpace',FunctionSpace);
figure();
subplot(2,2,1); PlotFEMesh(mesh); title('P2 mesh');
subplot(2,2,2); PlotFEMesh(mesh,1); title('P2 mesh with points marked');
subplot(2,2,3); PlotFEMesh(mesh,0,1);
                title('P2 mesh with implicit triangles');
subplot(2,2,4); PlotFEMesh(mesh,1,1);
                title('P2 mesh with implicit triangles and points marked');

%% ATTENTION
% If you want to use this plot-routine to display the mesh in a paper or
% your thesis, modify it such that it fits your needs, e.g. change the
% LineWidth!

%% other ways to generate a mesh
% With the genMeshDelaunay function you can construct meshes using Matlab's
% delaunay function for a rectangular mesh [xMin,xMax] x [yMin,yMax] which
% Nx and Ny points in each direction. This produced mesh looks a little
% bit different than the one generated by genMesh:
xMin = 0; xMax = 1; Nx = 100;
yMin = 0; yMax = 1; Ny = 100; 
FunctionSpace = 'P1';
mesh = genMeshDelaunay(xMin,xMax,Nx,yMin,yMax,Ny,FunctionSpace);
figure();
subplot(1,2,1); mesh.Plot; axis equal off tight
% produces the same mesh as
mesh = genMeshDelaunay();
subplot(1,2,2); mesh.Plot; axis equal off tight
sgtitle('meshes generated with genMeshDelaunay');